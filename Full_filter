%full deconvoluton filter
%fourier transfer of MPPC data for use in the deonvolution protocol

%clearing workspace
clc
clear
close all

[FILENAME, PATHNAME] = uigetfile('*.dat', 'Select the MPPC 1 p.e. response');

name = strcat(PATHNAME, FILENAME);

%defining window length for delta function (blackman)
window_length = 250;

%calling in signal response data from MPPC
data = dlmread(name);
response_sig = data(:, 2);
response_sig(length(response_sig)*2)=0;
response_fft = fft(response_sig);

%fourier trasnfer of blackmanwindow function

bmw = blackman(window_length);
bmw(length(response_fft))=0;
bmw_fft = fft(bmw);

%division as stated in protocol
deconv = bmw_fft./response_fft;     

%%Wiener component of filter 

%power component of filter
response_pow = abs(response_fft).^2;

%inputting noise data and performing fft
[FILENAME2, PATHNAME2] = uigetfile('*.dat', 'Select the MPPC noise data');
name_noise = strcat(PATHNAME2, FILENAME2);

noise_data = dlmread(name_noise);
noise_data = noise_data(1:length(response_pow));
%noise_data = noise_data(length(noise_data),2)


Fnoise = fft(noise_data);

Fnoise_power = abs(Fnoise).^2;

%constructing weiner filter

wiener_filter = (response_pow)./(Fnoise_power' + response_pow);

%%applying wiener filter
N_temp = Fnoise'.*wiener_filter;
n_recovered = real(ifft(N_temp));
plot(data(:,1), n_recovered(1:length(data)),'c')
hold on
plot(data(:,1), noise_data(1,length(noise_data)/2 + 1 : length(noise_data)), 'r')

%multiplying the two variables together

deconv_W = (deconv .* wiener_filter);

%performing inverse fourier transform

deconv_filter = ifft(deconv_W);
